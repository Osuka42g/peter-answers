{"version":3,"sources":["StyleSheet.js","Components/CollectionComponents.js","Components/Header.js","Components/Form.js","Components/Input.js","Components/Button.js","Components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["StyleSheet","react_default","a","createElement","rel","href","integrity","crossOrigin","inputField","width","Header","props","className","children","Form","Input","_props$disabled","disabled","onChange","title","value","id","style","type","Button","text","onClick","Spinner","Fragment","role","peterDefaultPetition","defaultAnswers","App","_useState","useState","_useState2","Object","slicedToArray","petition","setPetition","_useState3","_useState4","answer","setAnswer","_useState5","_useState6","isTrickMode","setIsTrickMode","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","answerToDisplay","setAnswerToDisplay","CollectionComponents_Header","CollectionComponents_Form","CollectionComponents_Input","e","target","characterPosition","length","lastInsertedChar","didInsertedDot","updatedPetition","CollectionComponents_Button","answerValue","rndAnswer","Math","floor","random","determineAnswer","setTimeout","CollectionComponents_Spinner","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbf68bf8.chunk.js","sourcesContent":["import React from 'react'\n\nexport default () => <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossOrigin=\"anonymous\" />\n\nexport const inputField = {\n    width: 500\n}","import HeaderComponent from './Header'\nimport FormComponent from './Form'\nimport InputComponent from './Input'\nimport ButtonComponent from './Button'\nimport SpinnerComponent from './Spinner'\n\nexport const Header = HeaderComponent\nexport const Form = FormComponent\nexport const Input = InputComponent\nexport const Button = ButtonComponent\nexport const Spinner = SpinnerComponent","import React from 'react'\n\nexport default props =>\n  <header className='App-header'>\n    {props.children}\n  </header>\n","import React from 'react'\n\nexport default props =>\n  <form>\n    {props.children}\n  </form>\n","import React from 'react'\nimport { inputField, } from '../StyleSheet'\n\n\nexport default props => {\n  const { disabled = false, onChange, title, value, } = props\n\n  return <div className='input-group mb-3'>\n    <div className=\"input-group-prepend\">\n      <span className=\"input-group-text\" id=\"basic-addon3\">{title}</span>\n    </div>\n    <input\n      className='form-control'\n      style={inputField}\n      type='text'\n      value={value}\n      onChange={onChange}\n      disabled={disabled}\n    />\n  </div>\n}\n","import React from 'react'\n\nexport default props => {\n  const { text, disabled, onClick, } = props\n\n  return <button\n    className='btn btn-secondary'\n    disabled={disabled}\n    onClick={onClick}\n    type='button'\n  >\n    {text}\n  </button>\n}\n","import React from 'react'\n\nexport default props => {\n  const { disabled } = props\n\n  if (disabled) {\n    return <></>\n  }\n\n  return <div className='spinner-grow' role='status'>\n    <span className='sr-only'>Loading...</span>\n  </div>\n}\n","import React, { useState, } from 'react'\nimport StyleSheet from './StyleSheet'\nimport './App.css'\nimport { Header, Form, Input, Button, Spinner, } from './Components/CollectionComponents'\n\nconst peterDefaultPetition = 'Peter please answer the following question'\nconst defaultAnswers = [\n  'I don\\'t know...',\n  'I won\\'t answer...',\n  'Who cares?',\n  'You are becoming annoying..',\n  'If you don\\'t ask properly, I will never answer',\n]\n\nfunction App() {\n\n  const [petition, setPetition,] = useState('')\n  const [answer, setAnswer,] = useState('')\n  const [isTrickMode, setIsTrickMode] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [answerToDisplay, setAnswerToDisplay] = useState('')\n\n  const getPetitionCharAt = n => peterDefaultPetition[n] || ' '\n  const resetAnswer = () => setAnswer('')\n\n  const determineAnswer = () => {\n    if (0 === answer.length) {\n      const rndAnswer = Math.floor(Math.random() * defaultAnswers.length)\n      return defaultAnswers[rndAnswer]\n    }\n\n    return answer\n  }\n\n  const updatedPetition = e => {\n    const { target: { value } } = e\n    const characterPosition = value.length - 1\n    const lastInsertedChar = value[characterPosition]\n    const didInsertedDot = '.' === lastInsertedChar\n\n    let updatedPetition = value\n\n    if (didInsertedDot) {\n      setIsTrickMode(!isTrickMode)\n    }\n\n    if (didInsertedDot || isTrickMode) {\n      updatedPetition = petition + getPetitionCharAt(characterPosition)\n\n      const hiddenAnswer = didInsertedDot\n        ? answer\n        : answer + lastInsertedChar\n      setAnswer(hiddenAnswer)\n    }\n\n    return setPetition(updatedPetition)\n  }\n\n  const processQuestion = () => {\n    setIsLoading(true)\n    setAnswerToDisplay('')\n\n    const answerValue = determineAnswer()\n\n    setTimeout(() => {\n      setIsLoading(false)\n      setAnswerToDisplay(answerValue)\n      resetAnswer()\n    }, 1500)\n  }\n\n  return (\n    <div className='App'>\n      <StyleSheet />\n      <Header>\n        <Form>\n          <Input\n            disabled={isLoading}\n            onChange={updatedPetition}\n            title={'Petition'}\n            value={petition}\n          />\n          <Input\n            disabled={isLoading}\n            title={'Question'}\n          />\n          <Button\n            disabled={isLoading}\n            onClick={processQuestion}\n            text={'Ask'}\n          />\n      </Form>\n      <Spinner disabled={!isLoading} />\n      <div>\n        <h4>{answerToDisplay}</h4>\n      </div>\n      </Header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}